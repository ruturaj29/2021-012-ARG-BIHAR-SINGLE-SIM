<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MAH_ST0301.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MAH_ST0301.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Oct 19 19:03:51 2022
<BR><P>
<H3>Maximum Stack Usage =       2252 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LCD_ScrollDisplay &rArr; USB &rArr; USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[67]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
 <LI><a href="#[169]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[169]">send_cmd</a><BR>
 <LI><a href="#[144]">f_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[173]">disk_read</a><BR>
 <LI><a href="#[13f]">move_window</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[173]">disk_read</a><BR>
 <LI><a href="#[7f]">f_lseek</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[173]">disk_read</a><BR>
 <LI><a href="#[16c]">disk_ioctl_MMC_SD</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16c]">disk_ioctl_MMC_SD</a><BR>
 <LI><a href="#[16e]">vd_ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">f_open</a><BR>
 <LI><a href="#[18b]">putc_bfd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">putc_bfd</a><BR>
 <LI><a href="#[a3]">HTTP_Post</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">PackOffLog</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">BOD_IRQHandler</a> from bod.o(i.BOD_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT0_IRQHandler</a> from extintr.o(i.EINT0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT1_IRQHandler</a> from extintr.o(i.EINT1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT2_IRQHandler</a> from extintr.o(i.EINT2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT3_IRQHandler</a> from extintr.o(i.EINT3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART3_IRQHandler</a> from uart.o(i.UART3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from usbhost_lpc17xx.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[34]">myExtIntrIsr_1</a> from lcd_scroll.o(i.myExtIntrIsr_1) referenced from lcd_scroll.o(i.LCD_ScrollDisplay)
 <LI><a href="#[34]">myExtIntrIsr_1</a> from lcd_scroll.o(i.myExtIntrIsr_1) referenced from main.o(i.main)
 <LI><a href="#[35]">myExtIntrIsr_3</a> from rain.o(i.myExtIntrIsr_3) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e3]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1e4]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[55]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[43]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1fd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ff]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[203]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[40]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[204]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_ScrollDisplay &rArr; USB &rArr; USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[205]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[47]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[206]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[49]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Delete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[4f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[4d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[50]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_gnss_get_param
</UL>

<P><STRONG><a name="[207]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[20a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[53]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[9d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForStatus200_302
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
</UL>

<P><STRONG><a name="[cb]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
</UL>

<P><STRONG><a name="[11a]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[56]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
</UL>

<P><STRONG><a name="[58]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[20d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Flush
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[5b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[211]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[5d]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
</UL>

<P><STRONG><a name="[12d]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
</UL>

<P><STRONG><a name="[5f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[61]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[3f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[51]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5a]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[216]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[217]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[218]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[63]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[219]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[46]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[69]"></a>ADC_GetAdcValue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, adc.o(i.ADC_GetAdcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_GetAdcValue &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
</UL>

<P><STRONG><a name="[6c]"></a>ADC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_GetPclk
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bod.o(i.BOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>BOD_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bod.o(i.BOD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[6e]"></a>Buffer_Flush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gprs.o(i.Buffer_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForStatus200_302
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
</UL>

<P><STRONG><a name="[116]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[131]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(i.CLKPWR_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>

<P><STRONG><a name="[6f]"></a>Check_LocalIP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gprs.o(i.Check_LocalIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Check_LocalIP &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[72]"></a>Check_QIState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gprs.o(i.Check_QIState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Check_QIState &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[73]"></a>Config_Module_for_RI_Interrupt</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gprs.o(i.Config_Module_for_RI_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Config_Module_for_RI_Interrupt &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Configure_GPIO_Peripherals</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.Configure_GPIO_Peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Configure_GPIO_Peripherals &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Createlog</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.Createlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>DELAY_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.DELAY_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DELAY_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForStatus200_302
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PowerOff
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Module_for_RI_Interrupt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_sec
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_displayName
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>DELAY_sec</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.DELAY_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DELAY_sec &rArr; DELAY_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
</UL>

<P><STRONG><a name="[6b]"></a>DELAY_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(i.DELAY_us))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetAdcValue
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendDataSignals
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendCmdSignals
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Clock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>

<P><STRONG><a name="[84]"></a>DL_Status</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, log.o(i.DL_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DL_Status &rArr; Read_ADCchannels &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[86]"></a>EEPROM_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EEPROM_Init &rArr; SoftI2C_Init &rArr; GPIO_PinDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[88]"></a>EEPROM_ReadByte</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EEPROM_ReadByte &rArr; SoftI2C_Read &rArr; softI2c_NoAck &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadString
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>EEPROM_ReadString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_ReadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EEPROM_ReadString &rArr; EEPROM_ReadByte &rArr; SoftI2C_Read &rArr; softI2c_NoAck &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[8e]"></a>EEPROM_WriteByte</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EEPROM_WriteByte &rArr; SoftI2C_Write &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteString
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>EEPROM_WriteString</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EEPROM_WriteString &rArr; EEPROM_WriteByte &rArr; SoftI2C_Write &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[1f]"></a>EINT0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, extintr.o(i.EINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, extintr.o(i.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, extintr.o(i.EINT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, extintr.o(i.EINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>EINT_AttachInterrupt</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, extintr.o(i.EINT_AttachInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EINT_AttachInterrupt &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>EINT_DetachInterrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extintr.o(i.EINT_DetachInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EINT_DetachInterrupt &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>FSUSB_DiskReadyWait</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbhost_ms.o(i.FSUSB_DiskReadyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSUSB_DiskReadyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_USB
</UL>

<P><STRONG><a name="[92]"></a>Fill_MSCommand</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbhost_ms.o(i.Fill_MSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[96]"></a>GNSS_Connect</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gprs.o(i.GNSS_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GNSS_Connect &rArr; SendATandExpectResponse &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INITIALIZE
</UL>

<P><STRONG><a name="[98]"></a>GNSS_PowerOff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gprs.o(i.GNSS_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GNSS_PowerOff &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
</UL>

<P><STRONG><a name="[77]"></a>GPIO_PinDirection</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_GPIO_Peripherals
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_PinFunction</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_DetachInterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_AttachInterrupt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetAdcValue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_GPIO_Peripherals
</UL>

<P><STRONG><a name="[e7]"></a>GPIO_PinRead</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_PinWrite</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendLowerNibble
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendHigherNibble
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendDataSignals
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendCmdSignals
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_NoAck
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Clock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Ack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>

<P><STRONG><a name="[99]"></a>GPS_INITIALIZE</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gprs.o(i.GPS_INITIALIZE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPS_INITIALIZE &rArr; GNSS_Connect &rArr; SendATandExpectResponse &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
</UL>

<P><STRONG><a name="[9a]"></a>GSM_Delete_All_Msg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gprs.o(i.GSM_Delete_All_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GSM_Delete_All_Msg &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>GSM_Msg_Delete</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gprs.o(i.GSM_Msg_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GSM_Msg_Delete &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[9c]"></a>GSM_Msg_Display</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, gprs.o(i.GSM_Msg_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = GSM_Msg_Display &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
</UL>

<P><STRONG><a name="[9e]"></a>GSM_Msg_Read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gprs.o(i.GSM_Msg_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = GSM_Msg_Read &rArr; GSM_Msg_Display &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[9f]"></a>GSM_Send_Msg</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, gprs.o(i.GSM_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GSM_Send_Msg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[a3]"></a>HTTP_Post</STRONG> (Thumb, 1806 bytes, Stack size 80 bytes, gprs.o(i.HTTP_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForStatus200_302
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
</UL>

<P><STRONG><a name="[ad]"></a>HTTP_SetURL</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gprs.o(i.HTTP_SetURL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HTTP_SetURL &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
</UL>

<P><STRONG><a name="[ae]"></a>Host_CtrlRecv</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(i.Host_CtrlRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[b1]"></a>Host_CtrlSend</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(i.Host_CtrlSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[b2]"></a>Host_DelayMS</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.Host_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[b3]"></a>Host_DelayUS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(i.Host_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[b9]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_EDInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[b4]"></a>Host_EnumDev</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, usbhost_lpc17xx.o(i.Host_EnumDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Host_EnumDev &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_USB
</UL>

<P><STRONG><a name="[af]"></a>Host_FillSetup</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(i.Host_FillSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[bb]"></a>Host_HCCAInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_HCCAInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[b8]"></a>Host_Init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, usbhost_lpc17xx.o(i.Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Host_Init &rArr; Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_USB
</UL>

<P><STRONG><a name="[b0]"></a>Host_ProcessTD</STRONG> (Thumb, 220 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(i.Host_ProcessTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[ba]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_TDInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[bc]"></a>Host_WDHWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(i.Host_WDHWait))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[1b1]"></a>IOCheckInterrupts</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ioextint.o(i.IOCheckInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myExtIntrIsr_3
</UL>

<P><STRONG><a name="[1b2]"></a>IOClearInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ioextint.o(i.IOClearInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myExtIntrIsr_3
</UL>

<P><STRONG><a name="[1a9]"></a>IOSetDir</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ioextint.o(i.IOSetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>IOSetInterrupt</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, ioextint.o(i.IOSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>IOSetPull</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, ioextint.o(i.IOSetPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOSetPull
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>Init_display_name</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(i.Init_display_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_display_name &rArr; lcd16x2_create_custom_char &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_create_custom_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Initialize_ALL_Peripherals</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(i.Initialize_ALL_Peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Initialize_ALL_Peripherals &rArr; UART_Init &rArr; UART_SetBaudRate &rArr; getFractionValues &rArr; getFRValues &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Initialize_SIM_1</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, gprs.o(i.Initialize_SIM_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Initialize_SIM_1 &rArr; MODEM_CheckAttention &rArr; MODEMGetIMEI &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INITIALIZE
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Sim_Insert
</UL>

<P><STRONG><a name="[a4]"></a>LCD_Clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Clear &rArr; LCD_GoToLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_displayName
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[cc]"></a>LCD_CmdWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.LCD_CmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendLowerNibble
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendHigherNibble
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendCmdSignals
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_create_custom_char
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToNextLine
</UL>

<P><STRONG><a name="[d1]"></a>LCD_DisplayChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToNextLine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayString
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayNumber
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
</UL>

<P><STRONG><a name="[d4]"></a>LCD_DisplayFloatNumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd.o(i.LCD_DisplayFloatNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayNumber
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
</UL>

<P><STRONG><a name="[d6]"></a>LCD_DisplayNumber</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lcd.o(i.LCD_DisplayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
</UL>

<P><STRONG><a name="[da]"></a>LCD_DisplayString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_DisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_DisplayString &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
</UL>

<P><STRONG><a name="[a5]"></a>LCD_GoToLine</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(i.LCD_GoToLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GoToLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[d2]"></a>LCD_GoToNextLine</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.LCD_GoToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[db]"></a>LCD_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; LCD_GoToLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
</UL>

<P><STRONG><a name="[a6]"></a>LCD_Printf</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, lcd.o(i.LCD_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayString
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayNumber
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[de]"></a>LCD_ScrollDisplay</STRONG> (Thumb, 900 bytes, Stack size 48 bytes, lcd_scroll.o(i.LCD_ScrollDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 2228 + Unknown Stack Size
<LI>Call Chain = LCD_ScrollDisplay &rArr; USB &rArr; USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_DetachInterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_AttachInterrupt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetAdcValue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>LCD_SetCursor</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_SetCursor &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_put_custom_char
</UL>

<P><STRONG><a name="[c3]"></a>LCD_SetUp</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lcd.o(i.LCD_SetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_SetUp &rArr; GPIO_PinDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[ec]"></a>MODEMGetAPN</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, gprs.o(i.MODEMGetAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MODEMGetAPN &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
</UL>

<P><STRONG><a name="[ed]"></a>MODEMGetIMEI</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gprs.o(i.MODEMGetIMEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MODEMGetIMEI &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
</UL>

<P><STRONG><a name="[ee]"></a>MODEMGetSignalStrength</STRONG> (Thumb, 918 bytes, Stack size 32 bytes, gprs.o(i.MODEMGetSignalStrength))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = MODEMGetSignalStrength &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[ca]"></a>MODEM_CheckAttention</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, gprs.o(i.MODEM_CheckAttention))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MODEM_CheckAttention &rArr; MODEMGetIMEI &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
</UL>

<P><STRONG><a name="[ef]"></a>MODEM_GetNetworkTime</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gprs.o(i.MODEM_GetNetworkTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MODEM_GetNetworkTime &rArr; Update_RTC &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>MODEM_SetPhoneFunctionality</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gprs.o(i.MODEM_SetPhoneFunctionality))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MODEM_SetPhoneFunctionality &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_sec
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
</UL>

<P><STRONG><a name="[f2]"></a>MS_BulkRecv</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, usbhost_ms.o(i.MS_BulkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_USB
</UL>

<P><STRONG><a name="[f3]"></a>MS_BulkSend</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_BulkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_USB
</UL>

<P><STRONG><a name="[f4]"></a>MS_GetMaxLUN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[f5]"></a>MS_GetSenseInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetSenseInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_GetSenseInfo &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[f6]"></a>MS_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MS_Init &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_USB
</UL>

<P><STRONG><a name="[f9]"></a>MS_Inquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_Inquire &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[b6]"></a>MS_ParseConfiguration</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_ParseConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_ParseConfiguration &rArr; UART_TxString
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[f8]"></a>MS_ReadCapacity</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[f7]"></a>MS_TestUnitReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_TestUnitReady &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[fb]"></a>Module_PDP_Activation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gprs.o(i.Module_PDP_Activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Module_PDP_Activation &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
</UL>

<P><STRONG><a name="[fc]"></a>Module_PowerOff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gprs.o(i.Module_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Module_PowerOff &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
</UL>

<P><STRONG><a name="[ab]"></a>Module_Power_Initializing</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, gprs.o(i.Module_Power_Initializing))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = Module_Power_Initializing &rArr; modemCheck_initialization &rArr; MODEMGetSignalStrength &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_EnableBuffer_Interrupt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PDP_Activation
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_PowerOff
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>Module_awakeup_mode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gprs.o(i.Module_awakeup_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Module_awakeup_mode &rArr; Module_Power_Initializing &rArr; modemCheck_initialization &rArr; MODEMGetSignalStrength &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[100]"></a>Module_deactivateBearerProfile</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gprs.o(i.Module_deactivateBearerProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Module_deactivateBearerProfile &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>Module_sleep_mode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gprs.o(i.Module_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Module_sleep_mode &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>NVIC_SetPriorities</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriorities))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetPriorities &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>PackOffLog</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gprs.o(i.PackOffLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = PackOffLog &rArr; HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LocalIP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[107]"></a>PacketLog</STRONG> (Thumb, 786 bytes, Stack size 56 bytes, log.o(i.PacketLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = PacketLog &rArr; PackOffLog &rArr; HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_EnableBuffer_Interrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_QIState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LocalIP
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_integer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DisableBuffer_Interrupt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writelog
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>Progress_displayName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(i.Progress_displayName))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Progress_displayName &rArr; lcd16x2_put_custom_char &rArr; LCD_SetCursor &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_put_custom_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>Query_NetworkRegistration</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gprs.o(i.Query_NetworkRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Query_NetworkRegistration &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
</UL>

<P><STRONG><a name="[10c]"></a>Query_Set_CLTS</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gprs.o(i.Query_Set_CLTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Query_Set_CLTS &rArr; MODEM_SetPhoneFunctionality &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>Query_Sim_Insert</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gprs.o(i.Query_Sim_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Query_Sim_Insert &rArr; Initialize_SIM_1 &rArr; MODEM_CheckAttention &rArr; MODEMGetIMEI &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
</UL>

<P><STRONG><a name="[1ae]"></a>RTCSetAlarmMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.RTCSetAlarmMask))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>RTCStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(i.RTCStart))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>RTC_ClearIntPending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(i.RTC_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>RTC_GetDateTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtc.o(i.RTC_GetDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>RTC_GetIntPending</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(i.RTC_GetIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetIntPending
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearIntPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>RTC_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[1b0]"></a>RTC_IntDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(i.RTC_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>RTC_ReadGPREG</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(i.RTC_ReadGPREG))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>RTC_SetDateTime</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rtc.o(i.RTC_SetDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
</UL>

<P><STRONG><a name="[e9]"></a>RTC_WriteGPREG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(i.RTC_WriteGPREG))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset24HrRainAt8_16
</UL>

<P><STRONG><a name="[fa]"></a>ReadBE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(i.ReadBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[b5]"></a>ReadLE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(i.ReadLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[101]"></a>ReadNavigation</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, gprs.o(i.ReadNavigation))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadNavigation &rArr; store_gps &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>Read_ADCchannels</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, adc.o(i.Read_ADCchannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Read_ADCchannels &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetAdcValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>Read_Response</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, gprs.o(i.Read_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Response
</UL>

<P><STRONG><a name="[11b]"></a>Reset24HrRainAt8_16</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rain.o(i.Reset24HrRainAt8_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset24HrRainAt8_16 &rArr; UART_TxString
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>SMSDefaultSetting</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gprs.o(i.SMSDefaultSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SMSDefaultSetting &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
</UL>

<P><STRONG><a name="[10d]"></a>SMS_READ_Setting</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gprs.o(i.SMS_READ_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SMS_READ_Setting &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[97]"></a>SendATandExpectResponse</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gprs.o(i.SendATandExpectResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendATandExpectResponse &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetIMEI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
</UL>

<P><STRONG><a name="[11d]"></a>SendingLog</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, log.o(i.SendingLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = SendingLog &rArr; retrylog &rArr; PackOffLog &rArr; HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_EnableBuffer_Interrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LocalIP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DisableBuffer_Interrupt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>ShutDownModule</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gprs.o(i.ShutDownModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ShutDownModule &rArr; Module_PowerOff &rArr; WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PowerOff
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>SoftI2C_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, softi2c.o(i.SoftI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SoftI2C_Init &rArr; GPIO_PinDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>

<P><STRONG><a name="[8b]"></a>SoftI2C_Read</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, softi2c.o(i.SoftI2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SoftI2C_Read &rArr; softI2c_NoAck &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_NoAck
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
</UL>

<P><STRONG><a name="[89]"></a>SoftI2C_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, softi2c.o(i.SoftI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SoftI2C_Start &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
</UL>

<P><STRONG><a name="[8c]"></a>SoftI2C_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, softi2c.o(i.SoftI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SoftI2C_Stop &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
</UL>

<P><STRONG><a name="[8a]"></a>SoftI2C_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, softi2c.o(i.SoftI2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SoftI2C_Write &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
</UL>

<P><STRONG><a name="[122]"></a>Start_Read_Response</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.Start_Read_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForStatus200_302
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SysTick_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[7b]"></a>SysTick_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTick_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writelog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>SysTick_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTick_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writelog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>UART1_DisableBuffer_Interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UART1_DisableBuffer_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>UART1_EnableBuffer_Interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UART1_EnableBuffer_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART3_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UART_Init &rArr; UART_SetBaudRate &rArr; getFractionValues &rArr; getFRValues &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[7d]"></a>UART_Printf</STRONG> (Thumb, 566 bytes, Stack size 64 bytes, uart.o(i.UART_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_rc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[124]"></a>UART_SetBaudRate</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, uart.o(i.UART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UART_SetBaudRate &rArr; getFractionValues &rArr; getFRValues &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a1]"></a>UART_TxChar</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(i.UART_TxChar))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[127]"></a>UART_TxFloatNumber</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uart.o(i.UART_TxFloatNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxNumber
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[125]"></a>UART_TxNumber</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, uart.o(i.UART_TxNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[70]"></a>UART_TxString</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.UART_TxString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxString
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSDefaultSetting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Response
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PowerOff
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PDP_Activation
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Delete_All_Msg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INITIALIZE
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_PowerOff
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Module_for_RI_Interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_QIState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LocalIP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset24HrRainAt8_16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[ea]"></a>USB</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, lcd_scroll.o(i.USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2180 + Unknown Stack Size
<LI>Call Chain = USB &rArr; USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
</UL>

<P><STRONG><a name="[12b]"></a>USB_Check_Authentication</STRONG> (Thumb, 210 bytes, Stack size 1608 bytes, mmc_176x_ssp.o(i.USB_Check_Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 2172<LI>Call Chain = USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
</UL>

<P><STRONG><a name="[12a]"></a>USB_INITIALIZATION</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.USB_INITIALIZATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USB_INITIALIZATION &rArr; disk_initialize &rArr; disk_initialize_USB &rArr; Host_EnumDev &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
</UL>

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, usbhost_lpc17xx.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_IRQHandler &rArr; UART_TxString
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>Update_RTC</STRONG> (Thumb, 304 bytes, Stack size 88 bytes, gprs.o(i.Update_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Update_RTC &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_integer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
</UL>

<P><STRONG><a name="[1a8]"></a>WDT_ClrTimeOutFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_wdt.o(i.WDT_ClrTimeOutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>WDT_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_wdt.o(i.WDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSDefaultSetting
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PDP_Activation
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_SetPhoneFunctionality
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Module_for_RI_Interrupt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpc17xx_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_Init &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[1a7]"></a>WDT_ReadTimeOutFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_wdt.o(i.WDT_ReadTimeOutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>WDT_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpc17xx_wdt.o(i.WDT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WDT_Start &rArr; WDT_SetTimeOut &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[133]"></a>WDT_UpdateTimeOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc17xx_wdt.o(i.WDT_UpdateTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WDT_UpdateTimeOut &rArr; WDT_SetTimeOut &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>WaitForExpectedResponse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gprs.o(i.WaitForExpectedResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WaitForExpectedResponse &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Response
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSDefaultSetting
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PowerOff
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_PDP_Activation
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SetURL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Delete_All_Msg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INITIALIZE
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_PowerOff
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Module_for_RI_Interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_QIState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_LocalIP
</UL>

<P><STRONG><a name="[a7]"></a>WaitForStatus200_302</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gprs.o(i.WaitForStatus200_302))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WaitForStatus200_302 &rArr; Start_Read_Response &rArr; Read_Response &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Response
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
</UL>

<P><STRONG><a name="[134]"></a>Wait_Till_SimModule_Communication</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gprs.o(i.Wait_Till_SimModule_Communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Wait_Till_SimModule_Communication &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATandExpectResponse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
</UL>

<P><STRONG><a name="[95]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.WriteBE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[94]"></a>WriteBE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.WriteBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[b7]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.WriteLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>

<P><STRONG><a name="[93]"></a>WriteLE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(i.WriteLE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[109]"></a>Writelog</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.Writelog))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = Writelog &rArr; create_folder &rArr; create_file &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[1b4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[136]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[137]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[138]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[139]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[13a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[13c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[54]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10a]"></a>ascii_integer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, convert.o(i.ascii_integer))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_RTC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>calcRainFall</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, rain.o(i.calcRainFall))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = calcRainFall &rArr; ftoa &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[12c]"></a>copy</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = copy &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB
</UL>

<P><STRONG><a name="[149]"></a>create_file</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = create_file &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
</UL>

<P><STRONG><a name="[135]"></a>create_folder</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.create_folder))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = create_folder &rArr; create_file &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writelog
</UL>

<P><STRONG><a name="[12f]"></a>disk_initialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = disk_initialize &rArr; disk_initialize_USB &rArr; Host_EnumDev &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_INITIALIZATION
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>disk_initialize_MMC_SD</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, mmc_176x_ssp.o(i.disk_initialize_MMC_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_initialize_MMC_SD &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[166]"></a>disk_initialize_USB</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usb_176x_diskio.o(i.disk_initialize_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = disk_initialize_USB &rArr; Host_EnumDev &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[16b]"></a>disk_ioctl</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[16c]"></a>disk_ioctl_MMC_SD</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, mmc_176x_ssp.o(i.disk_ioctl_MMC_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + In Cycle
<LI>Call Chain = disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_ioctl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[16d]"></a>disk_ioctl_USB</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_176x_diskio.o(i.disk_ioctl_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_ioctl_USB &rArr; FSUSB_DiskReadyWait
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUSB_DiskReadyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[173]"></a>disk_read</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = disk_read &rArr; disk_read_MMC_SD &rArr; vd_read &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_MMC_SD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[174]"></a>disk_read_MMC_SD</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mmc_176x_ssp.o(i.disk_read_MMC_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = disk_read_MMC_SD &rArr; vd_read &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[175]"></a>disk_read_USB</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_176x_diskio.o(i.disk_read_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = disk_read_USB &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[177]"></a>disk_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_status &rArr; disk_status_MMC_SD
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status_MMC_SD
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[178]"></a>disk_status_MMC_SD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.disk_status_MMC_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_status_MMC_SD
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[179]"></a>disk_status_USB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_176x_diskio.o(i.disk_status_USB))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[123]"></a>disk_timerproc</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mmc_176x_ssp.o(i.disk_timerproc))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15b]"></a>disk_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = disk_write &rArr; disk_write_USB &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_MMC_SD
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[17b]"></a>disk_write_MMC_SD</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, mmc_176x_ssp.o(i.disk_write_MMC_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_write_MMC_SD &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[17c]"></a>disk_write_USB</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_176x_diskio.o(i.disk_write_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = disk_write_USB &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[14c]"></a>f_chdir</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, ff.o(i.f_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = f_chdir &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
</UL>

<P><STRONG><a name="[80]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[12e]"></a>f_gets</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_gets &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[7f]"></a>f_lseek</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + In Cycle
<LI>Call Chain = f_lseek &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_ioctl
</UL>

<P><STRONG><a name="[14d]"></a>f_mkdir</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = f_mkdir &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
</UL>

<P><STRONG><a name="[7c]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = f_mount &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
</UL>

<P><STRONG><a name="[7e]"></a>f_open</STRONG> (Thumb, 514 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check_Authentication
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_ioctl
</UL>

<P><STRONG><a name="[81]"></a>f_puts</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, ff.o(i.f_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = f_puts &rArr; putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_append_file
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[144]"></a>f_read</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + In Cycle
<LI>Call Chain = f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vd_ioctl
</UL>

<P><STRONG><a name="[18d]"></a>f_rename</STRONG> (Thumb, 282 bytes, Stack size 160 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = f_rename &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[14a]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = f_stat &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_folder
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
</UL>

<P><STRONG><a name="[181]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[190]"></a>f_unlink</STRONG> (Thumb, 194 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = f_unlink &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[145]"></a>f_write</STRONG> (Thumb, 532 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = f_write &rArr; disk_read &rArr; disk_read_MMC_SD &rArr; vd_read &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[1ba]"></a>ff_oem2uni</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, unicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[152]"></a>ff_uni2oem</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, unicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[143]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[13d]"></a>ftoa</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, convert.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ftoa &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
</UL>

<P><STRONG><a name="[e3]"></a>ftoa_signed</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, convert.o(i.ftoa_signed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ftoa_signed &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
</UL>

<P><STRONG><a name="[183]"></a>get_fattime</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, log.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_fattime
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[193]"></a>intToStr</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, convert.o(i.intToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intToStr &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[be]"></a>lcd16x2_create_custom_char</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd.o(i.lcd16x2_create_custom_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcd16x2_create_custom_char &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display_name
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>lcd16x2_put_custom_char</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(i.lcd16x2_put_custom_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd16x2_put_custom_char &rArr; LCD_SetCursor &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_displayName
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>lcd_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd.o(i.lcd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_enable &rArr; LCD_Init &rArr; LCD_Clear &rArr; LCD_GoToLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
</UL>

<P><STRONG><a name="[1a5]"></a>log_SMS</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mmc_176x_ssp.o(i.log_SMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = log_SMS &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMSDefaultSetting
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_rc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 2732 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2252 + Unknown Stack Size
<LI>Call Chain = main &rArr; LCD_ScrollDisplay &rArr; USB &rArr; USB_Check_Authentication &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_EnableBuffer_Interrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startModule_vREG
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_initialization
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDownModule
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Set_CLTS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_GetNetworkTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Delete_All_Msg
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Module_for_RI_Interrupt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_DetachInterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_AttachInterrupt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_integer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntDisable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCStart
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSetAlarmMask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ReadTimeOutFlag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ClrTimeOutFlag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_enable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_put_custom_char
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_create_custom_char
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_displayName
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display_name
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DisableBuffer_Interrupt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOSetPull
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOSetInterrupt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOSetDir
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset24HrRainAt8_16
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorities
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_ALL_Peripherals
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_GPIO_Peripherals
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ff]"></a>modemCheck_initialization</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, gprs.o(i.modemCheck_initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = modemCheck_initialization &rArr; MODEMGetSignalStrength &rArr; Createlog &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Createlog
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_NetworkRegistration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetSignalStrength
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEMGetAPN
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>modem_initialization</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gprs.o(i.modem_initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = modem_initialization &rArr; Query_Sim_Insert &rArr; Initialize_SIM_1 &rArr; MODEM_CheckAttention &rArr; MODEMGetIMEI &rArr; LCD_Printf &rArr; LCD_DisplayFloatNumber &rArr; LCD_DisplayNumber &rArr; LCD_DisplayChar &rArr; LCD_GoToNextLine &rArr; LCD_CmdWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Till_SimModule_Communication
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Sim_Insert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_CheckAttention
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS_Connect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Power_Initializing
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>myExtIntrIsr_1</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcd_scroll.o(i.myExtIntrIsr_1))
<BR>[Address Reference Count : 2]<UL><LI> lcd_scroll.o(i.LCD_ScrollDisplay)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[35]"></a>myExtIntrIsr_3</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rain.o(i.myExtIntrIsr_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myExtIntrIsr_3
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOClearInterrupt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCheckInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[194]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[10e]"></a>readSMS</STRONG> (Thumb, 3624 bytes, Stack size 112 bytes, gprs.o(i.readSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = readSMS &rArr; smsUpdateConfig &rArr; f_rename &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsUpdateConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadString
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForExpectedResponse
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Send_Msg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_Delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Delete_All_Msg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_integer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleTestlog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
</UL>

<P><STRONG><a name="[1ac]"></a>readconfigfile</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.readconfigfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = readconfigfile &rArr; f_open &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>retrylog</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.retrylog))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = retrylog &rArr; PackOffLog &rArr; HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_rc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
</UL>

<P><STRONG><a name="[1a2]"></a>reverse</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, convert.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
</UL>

<P><STRONG><a name="[e8]"></a>sampleTestlog</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, lcd_scroll.o(i.sampleTestlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = sampleTestlog &rArr; PackOffLog &rArr; HTTP_Post &rArr;  PackOffLog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_EnableBuffer_Interrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GoToLine
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemCheck_initialization
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_READ_Setting
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOffLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_sleep_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_deactivateBearerProfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_QIState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DisableBuffer_Interrupt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
</UL>

<P><STRONG><a name="[14b]"></a>sd_append_file</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.sd_append_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = sd_append_file &rArr; f_puts &rArr; putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file
</UL>

<P><STRONG><a name="[79]"></a>set_OpenDrainMode</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gpio.o(i.set_OpenDrainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_GPIO_Peripherals
</UL>

<P><STRONG><a name="[78]"></a>set_ResistorMode</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, gpio.o(i.set_ResistorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_GPIO_Peripherals
</UL>

<P><STRONG><a name="[1b6]"></a>smsUpdateConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.smsUpdateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = smsUpdateConfig &rArr; f_rename &rArr; mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSMS
</UL>

<P><STRONG><a name="[1b3]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[aa]"></a>startModule_vREG</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.startModule_vREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = startModule_vREG &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_awakeup_mode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_SIM_1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Post
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
</UL>

<P><STRONG><a name="[1bc]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1bf]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1c2]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1c6]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c4]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isIntValue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isIntValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
</UL>

<P><STRONG><a name="[1c7]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isIntValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[21c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
</UL>

<P><STRONG><a name="[1c9]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1cc]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ca]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1be]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1c1]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cb]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cd]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b7]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cf]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADCchannels
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcRainFall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ScrollDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendingLog
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketLog
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
</UL>

<P><STRONG><a name="[1d2]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1d6]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
</UL>

<P><STRONG><a name="[1d4]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
</UL>

<P><STRONG><a name="[1d5]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
</UL>

<P><STRONG><a name="[1d7]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[1d8]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
</UL>

<P><STRONG><a name="[21e]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[21f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[1d9]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1dc]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[1da]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1bd]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
</UL>

<P><STRONG><a name="[1db]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFloatNumber
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFloatNumber
</UL>

<P><STRONG><a name="[1dd]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[1df]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1c3]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[13b]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e0]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6d]"></a>adc_GetPclk</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, adc.o(i.adc_GetPclk))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1a0]"></a>gsm_gnss_get_param</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gprs.o(i.gsm_gnss_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gsm_gnss_get_param
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gps
</UL>

<P><STRONG><a name="[117]"></a>store_gps</STRONG> (Thumb, 450 bytes, Stack size 72 bytes, gprs.o(i.store_gps))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = store_gps &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_gnss_get_param
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_integer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa_signed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNavigation
</UL>

<P><STRONG><a name="[cd]"></a>lcd_BusyCheck</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lcd.o(i.lcd_BusyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_BusyCheck &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>

<P><STRONG><a name="[d3]"></a>lcd_DataWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.lcd_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_DataWrite &rArr; lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendLowerNibble
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendHigherNibble
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendDataSignals
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_BusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_put_custom_char
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd16x2_create_custom_char
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[dc]"></a>lcd_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(i.lcd_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_Reset &rArr; lcd_SendHigherNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_ms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendHigherNibble
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SendCmdSignals
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d0]"></a>lcd_SendCmdSignals</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.lcd_SendCmdSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_SendCmdSignals &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Reset
</UL>

<P><STRONG><a name="[1a4]"></a>lcd_SendDataSignals</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.lcd_SendDataSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_SendDataSignals &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>

<P><STRONG><a name="[cf]"></a>lcd_SendHigherNibble</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd.o(i.lcd_SendHigherNibble))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_SendHigherNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>

<P><STRONG><a name="[ce]"></a>lcd_SendLowerNibble</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd.o(i.lcd_SendLowerNibble))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_SendLowerNibble &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_DataWrite
</UL>

<P><STRONG><a name="[132]"></a>WDT_SetTimeOut</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lpc17xx_wdt.o(i.WDT_SetTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_SetTimeOut &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
</UL>

<P><STRONG><a name="[198]"></a>getFRValues</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, uart.o(i.getFRValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getFRValues &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
</UL>

<P><STRONG><a name="[128]"></a>getFractionValues</STRONG> (Thumb, 378 bytes, Stack size 104 bytes, uart.o(i.getFractionValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = getFractionValues &rArr; getFRValues &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isIntValue
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFRValues
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
</UL>

<P><STRONG><a name="[19d]"></a>isIntValue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart.o(i.isIntValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isIntValue &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFractionValues
</UL>

<P><STRONG><a name="[153]"></a>deselect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = deselect
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_MMC_SD
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_MMC_SD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[16a]"></a>power_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = power_off &rArr; select &rArr; wait_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
</UL>

<P><STRONG><a name="[168]"></a>power_on</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mmc_176x_ssp.o(i.power_on))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
</UL>

<P><STRONG><a name="[1a6]"></a>put_rc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.put_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = put_rc &rArr; UART_Printf &rArr; UART_TxFloatNumber &rArr; UART_TxNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfigfile
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_SMS
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrylog
</UL>

<P><STRONG><a name="[170]"></a>rcvr_datablock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rcvr_datablock &rArr; rcvr_spi_multi
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_MMC_SD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
</UL>

<P><STRONG><a name="[1b5]"></a>rcvr_spi_multi</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, mmc_176x_ssp.o(i.rcvr_spi_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcvr_spi_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[16f]"></a>select</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmc_176x_ssp.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = select &rArr; wait_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[169]"></a>send_cmd</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mmc_176x_ssp.o(i.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_MMC_SD
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_MMC_SD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[167]"></a>vd_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mmc_176x_ssp.o(i.vd_init))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
</UL>

<P><STRONG><a name="[16e]"></a>vd_ioctl</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, mmc_176x_ssp.o(i.vd_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + In Cycle
<LI>Call Chain = vd_ioctl &rArr;  f_open (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
</UL>

<P><STRONG><a name="[176]"></a>vd_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mmc_176x_ssp.o(i.vd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vd_read &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read_MMC_SD
</UL>

<P><STRONG><a name="[17a]"></a>vd_stat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_176x_ssp.o(i.vd_stat))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status_MMC_SD
</UL>

<P><STRONG><a name="[171]"></a>wait_ready</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[154]"></a>xchg_spi</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mmc_176x_ssp.o(i.xchg_spi))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl_MMC_SD
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize_MMC_SD
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>

<P><STRONG><a name="[17d]"></a>xmit_datablock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mmc_176x_ssp.o(i.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xmit_datablock &rArr; wait_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi_multi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write_MMC_SD
</UL>

<P><STRONG><a name="[1bb]"></a>xmit_spi_multi</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, mmc_176x_ssp.o(i.xmit_spi_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xmit_spi_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
</UL>

<P><STRONG><a name="[11f]"></a>softI2c_Ack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softi2c.o(i.softI2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = softI2c_Ack &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>

<P><STRONG><a name="[121]"></a>softI2c_Clock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, softi2c.o(i.softI2c_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_us
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_NoAck
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Ack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Write
</UL>

<P><STRONG><a name="[120]"></a>softI2c_NoAck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softi2c.o(i.softI2c_NoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = softI2c_NoAck &rArr; softI2c_Clock &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softI2c_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2C_Read
</UL>

<P><STRONG><a name="[106]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorities
</UL>

<P><STRONG><a name="[105]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorities
</UL>

<P><STRONG><a name="[13e]"></a>check_fs</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = check_fs &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[150]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[15a]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[142]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[146]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[14e]"></a>create_name</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[197]"></a>dbc_1st</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[1b9]"></a>dbc_2nd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[155]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[158]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; disk_write_USB &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[15c]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[157]"></a>dir_next</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[15e]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[160]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[164]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[156]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[191]"></a>find_volume</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[17f]"></a>follow_path</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[162]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[147]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = get_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[18e]"></a>get_fileinfo</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_fileinfo &rArr; put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[188]"></a>get_ldnumber</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[180]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[189]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[140]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[141]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[161]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[151]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[17e]"></a>mount_volume</STRONG> (Thumb, 746 bytes, Stack size 64 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mount_volume &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[13f]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[15f]"></a>pick_lfn</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[148]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[163]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[19f]"></a>put_utf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[18b]"></a>putc_bfd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(i.putc_bfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + In Cycle
<LI>Call Chain = putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[18c]"></a>putc_flush</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(i.putc_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = putc_flush &rArr; f_write &rArr; disk_read &rArr; disk_read_MMC_SD &rArr; vd_read &rArr; f_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[18a]"></a>putc_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ff.o(i.putc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc_init &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[187]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[185]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[184]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[18f]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[15d]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[186]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; disk_ioctl_MMC_SD &rArr;  disk_ioctl_MMC_SD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[159]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sync_window &rArr; disk_write &rArr; disk_write_USB &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[14f]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[182]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = validate &rArr; disk_status &rArr; disk_status_MMC_SD
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1ce]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1c0]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1de]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1d3]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
